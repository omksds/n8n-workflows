---
alwaysApply: true
---

# n8n 成功パターン学習ルール

## 🎯 ルールの目的

ユーザーから「うまく行った」「エラー解消した」「動作した」などの成功メッセージがあった時、その修正内容を自動的にルールに追記し、同じエラーを二度と起こさないようにする。

## 📝 成功パターン記録の手順

### 1. 成功メッセージの検出

以下のフレーズを検出したら、成功パターンとして記録する：

- 「うまく行った」「うまくいった」
- 「エラー解消した」「エラーが解決した」
- 「動作した」「機能した」「成功した」
- 「問題なく動く」「正常に動作」
- 「修正できた」「直った」

### 2. 記録すべき情報

成功時に以下の情報をルールに追記する：

- **問題の症状**: 発生していたエラーメッセージや症状
- **原因**: エラーの根本原因
- **解決策**: 具体的な修正内容
- **設定値**: 正しい設定値やコード例
- **検証方法**: 動作確認の方法

### 3. 追記対象ルール

成功パターンを以下のルールファイルに追記する：

- [n8n-troubleshooting-guide.mdc](mdc:.cursor/rules/n8n-troubleshooting-guide.mdc) - 問題と解決策の記録
- [n8n-switch-node-best-practices.mdc](mdc:.cursor/rules/n8n-switch-node-best-practices.mdc) - Switch ノード関連の成功例
- [n8n-python-code-patterns.mdc](mdc:.cursor/rules/n8n-python-code-patterns.mdc) - Python Code ノードの成功例
- [n8n-workflow-development.mdc](mdc:.cursor/rules/n8n-workflow-development.mdc) - 全般的なベストプラクティス

## 🔄 記録テンプレート

### 新しい成功パターンの記録形式

````markdown
### [問題番号]. [問題の簡潔な説明]

**症状**: [具体的なエラーメッセージや問題]
**原因**: [根本原因の説明]
**解決策**: [具体的な修正内容]
**正しい設定/コード**:

```[言語]
[正しいコード例]
```
````

**検証**: [動作確認方法]
**日付**: [YYYY-MM-DD]

````

### Switch ノード成功パターンの記録例
```markdown
### 5. ブール値比較での型エラー解決
**症状**: `TypeError: Cannot read properties of undefined (reading 'singleValue')`
**原因**: 数値比較で型不整合が発生
**解決策**: ブール値比較に変更
**正しい設定**:
```json
{
  "leftValue": "={{ $json.image_analysis.is_tall }}",
  "operator": {
    "type": "boolean",
    "operation": "true",
    "singleValue": true
  }
}
````

**検証**: Switch ノードでエラーなく分岐動作
**日付**: 2025-01-15

```

## 🎓 学習パターンの分類

### A. エラー解決パターン
- 型エラーの解決
- 設定エラーの修正
- データアクセスエラーの解決
- ノード接続エラーの修正

### B. 最適化パターン
- より効率的な実装方法
- より安定した設定
- より読みやすいコード構造
- より保守しやすい設計

### C. 新機能実装パターン
- 新しいノードの組み合わせ
- 新しいデータ処理方法
- 新しい条件分岐ロジック
- 新しい統合方法

## 📊 成功パターンの活用

### 1. 予防的活用
- 新しいワークフロー作成時に過去の成功パターンを参照
- 類似問題の早期発見と解決
- ベストプラクティスの自動適用

### 2. トラブルシューティング
- 問題発生時の迅速な解決策検索
- 過去の解決例からの類推
- エラーパターンマッチング

### 3. 知識共有
- チーム内でのノウハウ蓄積
- 新メンバーへの教育材料
- ドキュメント自動生成

## 🔧 実装ガイドライン

### 成功メッセージ検出時の処理
1. **コンテキスト分析**: 直前の会話で何が修正されたかを特定
2. **問題特定**: 解決された問題の症状と原因を記録
3. **解決策抽出**: 有効だった修正内容を抽出
4. **ルール更新**: 適切なルールファイルに追記
5. **検証情報**: 動作確認方法も記録

### 記録の品質確保
- **具体性**: 曖昧でない具体的な内容
- **再現性**: 他の人が同じ解決策を適用できる
- **完全性**: 必要な情報がすべて含まれている
- **正確性**: 実際に動作した内容のみ記録

## 📈 継続的改善

### 定期的なレビュー
- 月次で成功パターンの有効性を確認
- 古くなったパターンの更新
- より良いパターンへの統合

### パターンの統計分析
- 最も頻繁に発生する問題の特定
- 最も有効な解決策の特定
- 新しい問題傾向の発見

## 💡 活用例

### 過去の成功例（このチャット）
1. **Switch ノードのブール値比較**: 型エラーを完全回避
2. **ファイルサイズ文字列の数値変換**: `parse_file_size()` 関数
3. **looseTypeValidation設定**: 型チェック緩和で安定動作
4. **runOnceForEachItemモード**: 適切なデータアクセス

これらの成功パターンにより、同様の問題は今後発生しないように予防できている。

## 🎯 期待される効果

- **問題の再発防止**: 過去の解決済み問題の再発を防ぐ
- **開発効率向上**: 既知の解決策の迅速な適用
- **知識の蓄積**: チーム全体のスキル向上
- **品質の向上**: より安定したワークフローの開発
```
