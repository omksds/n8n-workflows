---
alwaysApply: true
---

# 成功パターン更新プロトコル

## 🎯 プロトコルの目的

n8n ワークフロー開発において、ユーザーから成功メッセージを受信した際に、その解決策を既存のルールファイルに自動追記し、同じエラーの再発を防ぐ。

## 🔍 成功メッセージの検出トリガー

### 日本語の成功表現

- 「うまく行った」「うまくいった」「うまくいく」
- 「成功した」「成功」「動作した」「機能した」
- 「エラー解消した」「エラーが解決した」「直った」
- 「問題なく動く」「正常に動作」「正常に機能」
- 「修正できた」「修正した」「解決できた」
- 「動いた」「動く」「働いた」「できた」
- 「これが正解だった」「正解」「これで良い」

### 英語の成功表現

- "it works", "working", "worked"
- "success", "successful", "succeeded"
- "fixed", "resolved", "solved"
- "no error", "error cleared", "error resolved"
- "this is correct", "this is right"

## 📝 更新手順

### 1. 成功メッセージ検出時

1. **直前のコンテキスト分析**: 最近の会話で何が修正・変更されたかを特定
2. **問題の特定**: 解決された具体的な問題（エラーメッセージ、症状）
3. **解決策の抽出**: 有効だった修正内容、設定値、コード
4. **該当ルール特定**: どのルールファイルに追記すべきかを判断
5. **パターン記録**: 新しい成功パターンを追記

### 2. 追記対象ルールファイル

#### A. エラー関連

- [n8n-troubleshooting-guide.mdc](mdc:.cursor/rules/n8n-troubleshooting-guide.mdc)
  - 新しいエラーパターンと解決策
  - 問題解決のパターン更新
  - チェックリストの項目追加

#### B. Switch ノード関連

- [n8n-switch-node-best-practices.mdc](mdc:.cursor/rules/n8n-switch-node-best-practices.mdc)
  - Switch 設定の成功例
  - 新しい条件分岐パターン
  - 型安全性の改善例

#### C. Python Code ノード関連

- [n8n-python-code-patterns.mdc](mdc:.cursor/rules/n8n-python-code-patterns.mdc)
  - Python コードの成功パターン
  - 新しいライブラリ使用例
  - データ処理の改善例

#### D. 全般的なワークフロー

- [n8n-workflow-development.mdc](mdc:.cursor/rules/n8n-workflow-development.mdc)
  - ワークフロー構造の改善
  - ノード接続の成功例
  - 全般的なベストプラクティス

### 3. 記録フォーマット

#### 新しい問題パターンの追加

```markdown
## 🚨 発生した主要な問題

### [次の番号]. [問題の簡潔な説明]

**症状**: [具体的なエラーメッセージや症状]
**原因**: [根本原因]
**解決**: [修正内容]
**成功日**: [YYYY-MM-DD]
```

#### 問題解決パターンの追加

````markdown
## 🛠️ 問題解決のパターン

### パターン[次の番号]: [解決パターン名]

```[言語]
# ❌ 問題のあるコード/設定
[問題のあったコード]

# ✅ 解決コード/設定
[正しいコード]
```
````

**成功日**: [YYYY-MM-DD]

````

#### チェックリスト項目の追加
```markdown
### [該当ノード名]作成時
- [ ] [新しいチェック項目]
````

## 🔄 更新の優先順位

### 高優先度（即座に更新）

1. **致命的エラーの解決**: ワークフロー停止を引き起こすエラー
2. **型エラーの解決**: JavaScript/Python の型関連エラー
3. **設定エラーの解決**: ノード設定の間違い

### 中優先度（適時更新）

1. **パフォーマンス改善**: より効率的な実装方法
2. **コード品質向上**: より読みやすい、保守しやすいコード
3. **新機能の実装**: 新しいノードの使用方法

### 低優先度（定期更新）

1. **細かい改善**: 小さな最適化
2. **ドキュメント改善**: より良い説明文
3. **例の追加**: より多くのサンプルコード

## 📊 更新パターンの例

### 実際の成功例（このチャット）

#### 1. Switch ノード型エラー解決

**検出メッセージ**: "私が手動で修正した。これが正解だった。"
**追記先**: n8n-switch-node-best-practices.mdc
**追記内容**: ブール値比較の正解パターン

#### 2. ファイルサイズエラー解決

**検出メッセージ**: "S3 Image Analyzer (Python Fixed)は機能した！"
**追記先**: n8n-python-code-patterns.mdc
**追記内容**: parse_file_size() 関数パターン

## 🎯 期待される成果

### 短期的効果

- 同じエラーの再発防止
- 解決済み問題の迅速な対応
- 開発時間の短縮

### 長期的効果

- n8n ワークフロー開発の専門知識蓄積
- チーム全体のスキル向上
- より安定したワークフローの開発

### 継続的改善

- 成功パターンの有効性検証
- 古いパターンの更新・統合
- 新しい問題傾向の早期発見

## 🔧 実装ガイド

### AI アシスタント向けの指示

1. **成功メッセージ検出**: 上記トリガーワードを検出
2. **コンテキスト分析**: 直前の修正内容を分析
3. **適切なルール選択**: 問題の種類に応じたルールファイル特定
4. **フォーマット適用**: 統一されたフォーマットで追記
5. **確認**: 追記内容の妥当性を検証

### 更新時の注意点

- **重複回避**: 既存の類似パターンとの重複をチェック
- **具体性確保**: 曖昧でない具体的な内容
- **再現性保証**: 他の人が同じ解決策を適用可能
- **完全性確認**: 必要な情報がすべて含まれている

このプロトコルにより、n8n ワークフロー開発における知識の継続的な蓄積と品質向上を実現する。
