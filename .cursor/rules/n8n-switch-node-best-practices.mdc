
# n8n Switch ノードの設定とトラブルシューティング

## 🎯 条件分岐ノードの使い分け

### IFノード vs Switchノード

#### **IFノード（If Node）**
- **分岐数**: 2つの分岐のみ（True/False）
- **用途**: シンプルな条件判定
- **設定**: 単一の条件のみ
- **制限**: 複数条件の組み合わせは可能だが、出力は2つまで

#### **Switchノード（Switch Node）**
- **分岐数**: 3つ以上の分岐が可能
- **用途**: 複雑な条件分岐
- **設定**: 複数の条件を設定可能
- **利点**: より柔軟な分岐制御

### 使い分けの判断基準

#### **IFノードを使用する場合**
```json
// シンプルな2択判定
{
  "conditions": [
    {
      "leftValue": "={{ $json.is_tall }}",
      "operator": {
        "type": "boolean",
        "operation": "true"
      }
    }
  ]
}
```

**適用例:**
- 画像の縦長/横長判定
- 成功/失敗の判定
- 有効/無効の判定

#### **Switchノードを使用する場合**
```json
// 複数の条件分岐
{
  "conditions": [
    {
      "id": "tall-check",
      "leftValue": "={{ $json.is_tall }}",
      "operator": {
        "type": "boolean",
        "operation": "true"
      }
    },
    {
      "id": "error-check",
      "leftValue": "={{ $json.error }}",
      "operator": {
        "type": "string",
        "operation": "notEquals"
      }
    }
  ]
}
```

**適用例:**
- 3つ以上の処理パターン
- エラー、成功、部分成功の分岐
- 複数の条件を組み合わせた判定

### 実際のワークフローでの応用

#### **現在のワークフロー（Enhanced Slack Image to S3 Upload）**
```json
// 3つの分岐が必要なため、Switchノードを使用
{
  "conditions": [
    {
      "id": "tall-check",
      "leftValue": "={{ $json.image_analysis.is_tall }}",
      "operator": {
        "type": "boolean",
        "operation": "true",
        "singleValue": true
      }
    },
    {
      "id": "error-check",
      "leftValue": "={{ $json.image_analysis.error }}",
      "operator": {
        "type": "string",
        "operation": "notEquals"
      }
    }
  ]
}
```

**分岐パターン:**
1. **縦長画像**: `is_tall = true` → 直接S3保存
2. **横長画像**: `is_tall = false` AND `error = null` → 元画像保存 + Lambda処理
3. **エラー**: `error != null` → エラーメッセージ

### 設計時のチェックリスト

#### **分岐数を確認**
- [ ] 2つの分岐のみ → **IFノード**
- [ ] 3つ以上の分岐 → **Switchノード**

#### **条件の複雑さを確認**
- [ ] 単一条件 → **IFノード**
- [ ] 複数条件の組み合わせ → **Switchノード**

#### **将来の拡張性を考慮**
- [ ] 分岐が増える可能性 → **Switchノード**
- [ ] 固定の2択 → **IFノード**

### トラブルシューティング

#### **よくある問題**
1. **IFノードで3つ以上の分岐を試行**
   - **症状**: 3つ目の分岐が動作しない
   - **解決**: Switchノードに変更

2. **Switchノードの条件設定ミス**
   - **症状**: 期待しない分岐に進む
   - **解決**: 条件の論理演算子を確認

3. **型の不整合**
   - **症状**: `TypeError: Cannot read properties of undefined`
   - **解決**: `looseTypeValidation: true` を設定

### ベストプラクティス

#### **1. 分岐数の事前確認**
- ワークフロー設計時に必要な分岐数を明確化
- 2つ以下ならIFノード、3つ以上ならSwitchノード

#### **2. 条件の明確化**
- 各分岐の条件を明確に定義
- 重複や矛盾がないかチェック

#### **3. エラーハンドリング**
- エラーケースも分岐として考慮
- デフォルトの処理パスを設定

#### **4. テストの実施**
- 各分岐パターンのテスト
- エラーケースのテスト

### 参考ファイル

このプロジェクトで作成された参考ファイル：
- [enhanced-workflow.json](mdc:Slack Image to S3 Upload/enhanced-workflow.json) - 3股分岐を使用したワークフロー
- [enhanced-workflow-diagram.drawio](mdc:Slack Image to S3 Upload/enhanced-workflow-diagram.drawio) - ワークフロー設計図

### 成功パターン記録

#### 3. 3股分岐でのSwitchノード使用
**症状**: IFノードで3つ以上の分岐を試行したが動作しない
**原因**: IFノードは2股分岐が限界
**解決策**: Switchノードに変更して複数条件を設定
**正しい設定**:
```json
{
  "conditions": [
    {
      "id": "condition1",
      "leftValue": "={{ $json.value1 }}",
      "operator": {"type": "boolean", "operation": "true"}
    },
    {
      "id": "condition2", 
      "leftValue": "={{ $json.value2 }}",
      "operator": {"type": "string", "operation": "notEquals"}
    }
  ]
}
```
**検証**: 3つの分岐が正しく動作
**日付**: 2025-01-15

2. **事前にブール値を計算** - Code ノードで準備
3. **適切な設定** - `looseTypeValidation: true`, `typeValidation: "loose"`
4. **デバッグログ** - 各段階での値と型を確認
